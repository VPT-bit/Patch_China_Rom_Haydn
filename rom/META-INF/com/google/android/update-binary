#!/sbin/sh

OUTFD=/proc/self/fd/$2
ZIPFILE="$3"

ui_print() {
  echo -e "ui_print $1\nui_print" >>$OUTFD
}

package_extract_file() {
  ui_print "- Flashing partition $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 >$2
}

package_extract_zstd() {
  ui_print "- Flashing partition $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 | /tmp/bin/android/zstd -c -d >$2
}

getVolumeKey() {
	ui_print "- Monitor volume key Press [+] to select "Yes" Press [-] to select "No""
	keyInfo=true
	while $keyInfo;do
		keyInfo=$(getevent -qlc 1 |grep KEY_VOLUME)
		if [ "$keyInfo" == "" ];then
			continue
		else
			isUpKey=$(echo $keyInfo |grep KEY_VOLUMEUP)
			[ "$isUpKey" != "" ] && return 0 || return 1
			break
		fi
	done
}

checkDevice() {
	myDevice=$(getprop ro.product.name)
	romDevice=haydn
	ui_print "========================="
	ui_print " "
	ui_print "device name: $myDevice"
	ui_print " "
	ui_print "ROM codename：$romDevice"
	ui_print " "
	ui_print "========================="
	if [ "$myDevice" != "$romDevice" ];then
		ui_print "- The device code test failed, please check again whether this package corresponds to your model"
		ui_print "- Do you want to continue flashing?"
		if ! getVolumeKey ;then
			exit
		fi
	fi
}

[ -d /tmp ] && rm -rf /tmp
mkdir -p /tmp
unzip "$ZIPFILE" bin/android/zstd -d /tmp
chmod -R 0755 /tmp
ui_print " "
ui_print "========================="
ui_print "  MIUI china mod for HAYDN  "
ui_print "           by V.P.T            "
ui_print "========================="
ui_print " "

checkDevice


romName=$(basename $ZIPFILE)
isPureSkyROM=$(echo $romName |grep PureSky)
isPureSkyDIY=$(echo $romName |grep -E "PureSkyDIY_|PureSkyDiy_")
if [ "$isPureSkyROM" != "" ];then
	ui_print "- Checking MD5 fragment"
	myHash=$(md5sum $ZIPFILE |head -c 10)
	if [ "$isPureSkyDIY" != "" ];then
		realHash=$(echo $romName |cut -d '_' -f 6)
		ui_print "- The correct MD5 fragment should be: $realHash"
	else
		realHash=$(echo $romName |cut -d '_' -f 5)
		ui_print "- The correct MD5 fragment should be: $realHash"
	fi
	ui_print "- The MD5 of the local ROM is: $myHash"
	if [ "$myHash" != "$realHash" ];then
		ui_print "- The MD5 fragment test fails and the flashing is terminated."
		exit 250
	fi
else
	ui_print "- Skip MD5 check"
fi




# Disable module
ui_print "- Disable module?"
if getVolumeKey; then
	ui_print "- Disable module"
	for module in $(ls -d /data/adb/modules/*); do
		moduleName=$(basename $module)
		ui_print "- Disabling $moduleName"
		touch $module/disable
	done
fi

ui_print "- Start flashing"


#firmware
package_extract_file "images/xbl_config.img" "/dev/block/bootdevice/by-name/xbl_config_a"
package_extract_file "images/xbl_config.img" "/dev/block/bootdevice/by-name/xbl_config_b"
package_extract_file "images/xbl.img" "/dev/block/bootdevice/by-name/xbl_a"
package_extract_file "images/xbl.img" "/dev/block/bootdevice/by-name/xbl_b"
package_extract_file "images/vendor_boot.img" "/dev/block/bootdevice/by-name/vendor_boot_a"
package_extract_file "images/vendor_boot.img" "/dev/block/bootdevice/by-name/vendor_boot_b"
package_extract_file "images/uefisecapp.img" "/dev/block/bootdevice/by-name/uefisecapp_a"
package_extract_file "images/uefisecapp.img" "/dev/block/bootdevice/by-name/uefisecapp_b"
package_extract_file "images/tz.img" "/dev/block/bootdevice/by-name/tz_a"
package_extract_file "images/tz.img" "/dev/block/bootdevice/by-name/tz_b"
package_extract_file "images/shrm.img" "/dev/block/bootdevice/by-name/shrm_a"
package_extract_file "images/shrm.img" "/dev/block/bootdevice/by-name/shrm_b"
package_extract_file "images/qupfw.img" "/dev/block/bootdevice/by-name/qupfw_a"
package_extract_file "images/qupfw.img" "/dev/block/bootdevice/by-name/qupfw_b"
package_extract_file "images/modem.img" "/dev/block/bootdevice/by-name/modem_a"
package_extract_file "images/modem.img" "/dev/block/bootdevice/by-name/modem_b"
package_extract_file "images/keymaster.img" "/dev/block/bootdevice/by-name/keymaster_a"
package_extract_file "images/keymaster.img" "/dev/block/bootdevice/by-name/keymaster_b"
package_extract_file "images/imagefv.img" "/dev/block/bootdevice/by-name/imagefv_a"
package_extract_file "images/imagefv.img" "/dev/block/bootdevice/by-name/imagefv_b"
package_extract_file "images/hyp.img" "/dev/block/bootdevice/by-name/hyp_a"
package_extract_file "images/hyp.img" "/dev/block/bootdevice/by-name/hyp_b"
package_extract_file "images/featenabler.img" "/dev/block/bootdevice/by-name/featenabler_a"
package_extract_file "images/featenabler.img" "/dev/block/bootdevice/by-name/featenabler_b"
package_extract_file "images/dtbo.img" "/dev/block/bootdevice/by-name/dtbo_a"
package_extract_file "images/dtbo.img" "/dev/block/bootdevice/by-name/dtbo_b"
package_extract_file "images/dsp.img" "/dev/block/bootdevice/by-name/dsp_a"
package_extract_file "images/dsp.img" "/dev/block/bootdevice/by-name/dsp_b"
package_extract_file "images/devcfg.img" "/dev/block/bootdevice/by-name/devcfg_a"
package_extract_file "images/devcfg.img" "/dev/block/bootdevice/by-name/devcfg_b"
package_extract_file "images/cpucp.img" "/dev/block/bootdevice/by-name/cpucp_a"
package_extract_file "images/cpucp.img" "/dev/block/bootdevice/by-name/cpucp_b"
package_extract_file "images/bluetooth.img" "/dev/block/bootdevice/by-name/bluetooth_a"
package_extract_file "images/bluetooth.img" "/dev/block/bootdevice/by-name/bluetooth_b"
package_extract_file "images/aop.img" "/dev/block/bootdevice/by-name/aop_a"
package_extract_file "images/aop.img" "/dev/block/bootdevice/by-name/aop_b"
package_extract_file "images/abl.img" "/dev/block/bootdevice/by-name/abl_a"
package_extract_file "images/abl.img" "/dev/block/bootdevice/by-name/abl_b"


# unzip boot
unzip -o $ZIPFILE "images/boot*.img" -d /tmp >/dev/null 2>&1
unzip -o $ZIPFILE "images/init_boot*.img" -d /tmp >/dev/null 2>&1
unzip -o $ZIPFILE "images/recovery*.img" -d /tmp >/dev/null 2>&1
if [ -f tmp/images/boot.img ];then
	package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_a"
	package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_b"
fi

if [ -f tmp/images/init_boot_magisk.img ];then
	ui_print "- Do you need ROOT？"
	if getVolumeKey ;then
		ui_print "- Flashing root"
		package_extract_file "images/init_boot_magisk.img" "/dev/block/bootdevice/by-name/init_boot_a"
		package_extract_file "images/init_boot_magisk.img" "/dev/block/bootdevice/by-name/init_boot_b"
	else
		if [ -f tmp/images/init_boot.img ];then
			package_extract_file "images/init_boot.img" "/dev/block/bootdevice/by-name/init_boot_a"
			package_extract_file "images/init_boot.img" "/dev/block/bootdevice/by-name/init_boot_b"
		fi
	fi
	package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_a"
	package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_b"
else
	if [ -f tmp/images/boot_magisk.img ];then
		ui_print "- Do you need ROOT？"
		if getVolumeKey; then
			ui_print "- Flashing root"
			package_extract_file "images/boot_magisk.img" "/dev/block/bootdevice/by-name/boot_a"
			package_extract_file "images/boot_magisk.img" "/dev/block/bootdevice/by-name/boot_b"
		else
			if [ -f tmp/images/boot.img ];then
				package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_a"
				package_extract_file "images/boot.img" "/dev/block/bootdevice/by-name/boot_b"
			fi
		fi
	fi
fi


# unzip preloader
unzip -o $ZIPFILE "images/preloader*.img" -d /tmp >/dev/null 2>&1

# When flashing the preloader on some models, the flash memory type of some models is detected, UFS or EMMC.

# UFS
if [ -e /dev/block/sda ] && [ -f tmp/images/preloader_ufs.img ] ;then
	unzip -p $ZIPFILE images/preloader_ufs.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/sda
fi

#EMMC
if [ -e /dev/block/mmcblk0boot0 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/mmcblk0boot0
fi

if [ -e /dev/block/mmcblk0boot1 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/mmcblk0boot1
fi

# Get the partition name when there is preloader_raw.img
if [ -f tmp/images/preloader_raw.img ] ;then
	for preloaderPartition in $(ls /dev/block/by-name |grep preloader);do
		unzip -p $ZIPFILE images/preloader_raw.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/"$preloaderPartition"
	done
fi




#super cust image
package_extract_file "images/cust.img" "/dev/block/bootdevice/by-name/cust"
package_extract_zstd "images/super.zst" "/dev/block/bootdevice/by-name/super"




ui_print "- clear cache"
rm -rf /data/dalvik-cache/arm/*
rm -rf /data/dalvik-cache/arm64/*
ui_print " "
ui_print " "
ui_print "- Flashing completed"
ui_print " "
ui_print " "
ui_print "- Please ignore the red mounting error."
ui_print "- Please ignore the red mounting error."
ui_print "- Please ignore the red mounting error."
ui_print " "
ui_print " "
exit 0
